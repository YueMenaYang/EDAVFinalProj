[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Insights into U.S. Electric Vehicle Population",
    "section": "",
    "text": "1 Introduction\nElectric Vehicles (EVs) are becoming more popular as people look for new and efficient ways to travel. EVs are cars that run partly or fully on electricity. Unlike traditional cars that use gas, EVs are powered by batteries and are more energy-efficient. The EV market in the U.S. is growing quickly, helped by falling battery prices, government support, and better charging infrastructure.\nWhile many focus on how EVs help the environment, this project looks at something different: the sales and number of EVs in the United States. By studying data on EV registrations/counts, fuel prices through time, and charging stations, this project will explore how EV market or counts are changing in different parts of the United States.\nWe chose this topic because population of EVs show how the car industry is changing and how people’s preferences are shifting. Studying the counts of EVs can reveal important trends, challenges, and opportunities that can help businesses, governments, and buyers understand where the market is headed and how they are influenced by various factors.\nThis project will answer questions like:\nWhat is general look of EV market, and what factors affect it ?\nHow have EV counts changed over time in different states and regions?\nHow the counts of different EV brands are distributed in a specific state?\nWhat is the difference in counts between Battery Electric Vehicles (BEVs) and Plug-in Hybrid Electric Vehicles (PHEVs)?\nHow do factors like the number of charging stations and fuel prices affect EV sales?\n….."
  },
  {
    "objectID": "data.html#description",
    "href": "data.html#description",
    "title": "2  Data",
    "section": "2.1 Description",
    "text": "2.1 Description\n\nAlternative Fuel Price Report in the US Link: https://afdc.energy.gov/fuels/prices.html Last Update/Frequency: Oct 2024 Dimension: 10 columns, 103 rows Original Format: Excel Plan to Import in Form: CSV Description: This dataset provides the average fuel prices (in dollars per gasoline gallon equivalents, GGEs) in the United States for various fuel types, including Biodiesel (B99-B100), Ethanol (E85), Natural Gas (CNG), Liquefied Natural Gas (LNG), Propane, Gasoline, and Diesel. The data, consisting of numerical values, captures the fluctuations in fuel prices over time, spanning from April 10, 2000, to April 1, 2024. However, there are several issues with the dataset. Notably, there are numerous missing values, particularly for LNG and B99-B100, especially in the earlier years. Additionally, the frequency of data collection is inconsistent. For instance, in 2000, data was collected only once (on April 10), whereas in 2004, data was collected twice (on March 3 and November 15). This inconsistency could pose challenges when attempting to analyze or compare price trends across years.\nCharge Station Data in the US Link: https://driveelectric.gov/stations Last Update/Frequency: At least once a year Dimension: 75 columns, 73967 rows Original Format: CSV Plan to Import in Form: CSV This data is interested that it shows all the geomgraphly distribution along with all EV charging station in the state. In this data set it provide both numerical data and categorical data: For numerical data, it collects and present the charying types counts and location in term of latitude and attitude. For the categorical data, it represents the area, public status, restrict access or so. This dataset does not contain much missing value and majority indicate the distribution information along with area and charge types. Many values in many columns are missing and the dataset is sparse in some part, but as long as the values we need are available, then we will be able to analyze.\nElectric Vehicle Population Data in the State of Washington Link: https://catalog.data.gov/dataset/electric-vehicle-population-data Last Update/Frequency: October 19, 2024 Dimension: 17 columns, 210165 rows Original Format: CSV Plan to Import in Form: CSV Description: This dataset shows the Battery Electric Vehicles (BEVs) and Plug-in Hybrid Electric Vehicles (PHEVs) that are registered through the Washington State Department of Licensing (DOL) in 2020. Specifically, this dataset provide variables in term of brand of EV and county location of sales along with their EV types, Model Make, and Ectric Range. There are no missing values in term and the dataset contains both numerical and categorial correspond to parameters in Electric Vehicle and location information. However, there are many 0 values in the column Manufacturer’s Suggested Retail Price (MSRP), which are not real values, so we can’t use this dataset to discuss the price of EVs.\nElectric Vehicle Population Size History By County in the State of Washington Link: https://catalog.data.gov/dataset/electric-vehicle-population-size-history-by-count Last Update/Frequency: October 19, 2024 Dimension: 10 columns, 23440 rows Original Format: Excel Plan to Import in Form: CSV Description: This shows the number of vehicles that were registered by the Washington State Department of Licensing (DOL) each month from 2020 to 2024. The data is separated by county for passenger vehicles and trucks. Specifically, it provide detail numerical information about Batteries, Plug in, hybrid, total number of EV, and non EV total number. It could be suggested that we could use pie chart or other graph to display the distribution of EV vs Non-EV sales along with Area. There are no missing data, but the data is not organized well. For example, the rows are not sorted based on the dates, so we need to be careful when dealing with it."
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.2 Missing value analysis",
    "text": "2.2 Missing value analysis\n\n\nCode\nlibrary(ggplot2)\nlibrary(dplyr)\nlibrary(readr)\n\n\n\nAlternative Fuel Price Report in the US\n\n\n\nCode\n# Datset name: fuel_prices_average\nfile_path &lt;- \"data/fuel_prices.csv\"\ndata &lt;- read.csv(file_path, stringsAsFactors = FALSE)\n\nfuel_prices_average &lt;- data[-1, ] \nfuel_prices_average &lt;- fuel_prices_average[, -1] \ncolnames(fuel_prices_average) &lt;- fuel_prices_average[1, ] \nfuel_prices_average &lt;- fuel_prices_average[-1, ]\n\n\n\n\nCode\nmissing_values &lt;- colSums(is.na(fuel_prices_average))\n\nmissing_df &lt;- data.frame(Column = names(missing_values), MissingValues = missing_values)\nggplot(missing_df, aes(x = reorder(Column, -MissingValues), y = MissingValues)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  coord_flip() +\n  labs(title = \"Missing Values Per Column (Before Handling)\", x = \"Columns\", y = \"Count of Missing Values\")\n\n\n\n\n\nCode\nwrite_csv(fuel_prices_average, \"data/fuel_prices_average.csv\")\n\n\nThere are no missing values.\n\nCharge Station Data in the US\n\n\n\nCode\nfile_path &lt;- \"data/fuel_Charging_Station.csv\"\ndata &lt;- read.csv(file_path, stringsAsFactors = FALSE)\ndata[data == \"\"] &lt;- NA\nchargStat &lt;- data\n\n\n\n\nCode\nmissing_values &lt;- colSums(is.na(chargStat))\nmissing_df &lt;- data.frame(Column = names(missing_values), MissingValues = missing_values)\nrownames(missing_df) &lt;- NULL\n\nggplot(missing_df, aes(x = reorder(Column, -MissingValues), y = MissingValues)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  coord_flip() +\n  labs(\n    title = \"Missing Values Per Column\",\n    x = \"Columns\",\n    y = \"Count of Missing Values\"\n  ) +\n  theme_minimal()\n\n\n\n\n\nSeveral columns have a significant number of missing values, with many showing over 60,000 missing entries. These likely represent fields that are either rarely applicable or not consistently reported across all charging stations, like RD.Blended.with.Biodiesel or CNG.Storage.Capacity. Missing values might also correlate with station type, location, or infrastructure differences. For example: Urban areas may have more complete data for public-facing fields. Columns like E85.Other.Ethanol.Blends, Hydrogen.Pressures, or NG.Fill.Type.Primary have extremely high proportions of missing values because these fields pertain to specialized infrastructure that is only applicable to certain types of stations.\nCore information columns such as ZIP, Updated.At, Street.Address, Station.Name, City, State, and Latitude/Longitude have no missing values (or very few). These are likely required fields for each charging station, making them consistently reported.\n\n\nCode\nmissing_df &lt;- missing_df[order(-missing_df$MissingValues), ]\nprint(missing_df)\n\n\n                                    Column MissingValues\n8                                    Plus4         73967\n15                               BD.Blends         73967\n16                       NG.Fill.Type.Code         73967\n17                                  NG.PSI         73967\n34                    Hydrogen.Status.Link         73967\n35                        NG.Vehicle.Class         73967\n36                             LPG.Primary         73967\n37                        E85.Blender.Pump         73967\n40        Intersection.Directions..French.         73967\n41               Access.Days.Time..French.         73967\n42                      BD.Blends..French.         73967\n44                      Hydrogen.Is.Retail         73967\n49                       CNG.Dispenser.Num         73967\n50            CNG.On.Site.Renewable.Source         73967\n51          CNG.Total.Compression.Capacity         73967\n52                    CNG.Storage.Capacity         73967\n53            LNG.On.Site.Renewable.Source         73967\n54                E85.Other.Ethanol.Blends         73967\n56                     EV.Pricing..French.         73967\n57                        LPG.Nozzle.Types         73967\n58                      Hydrogen.Pressures         73967\n59                      Hydrogen.Standards         73967\n60                      CNG.Fill.Type.Code         73967\n61                                 CNG.PSI         73967\n62                       CNG.Vehicle.Class         73967\n63                       LNG.Vehicle.Class         73967\n66                               RD.Blends         73967\n67                      RD.Blends..French.         73967\n68               RD.Blended.with.Biodiesel         73967\n69              RD.Maximum.Biodiesel.Level         73967\n71 CNG.Station.Sells.Renewable.Natural.Gas         73967\n72 LNG.Station.Sells.Renewable.Natural.Gas         73967\n21                           EV.Other.Info         73956\n75                         Funding.Sources         73940\n31                       Federal.Agency.ID         73939\n32                     Federal.Agency.Name         73939\n47                     Federal.Agency.Code         73939\n18                      EV.Level1.EVSE.Num         73852\n70                           NPS.Unit.Name         73736\n64             EV.On.Site.Renewable.Source         73678\n46                      Access.Detail.Code         70291\n11                           Expected.Date         68892\n14                          Cards.Accepted         66914\n73                   Maximum.Vehicle.Class         63634\n20                        EV.DC.Fast.Count         61821\n65                       Restricted.Access         61672\n55                              EV.Pricing         60116\n48                           Facility.Type         58787\n30                         Owner.Type.Code         57814\n4                  Intersection.Directions         50730\n19                      EV.Level2.EVSE.Num         10652\n23                          EV.Network.Web          6303\n13                        Access.Days.Time          5777\n9                            Station.Phone           635\n33                               Open.Date           543\n27                     Date.Last.Confirmed           119\n38                      EV.Connector.Types            14\n1                           Fuel.Type.Code             0\n2                             Station.Name             0\n3                           Street.Address             0\n5                                     City             0\n6                                    State             0\n7                                      ZIP             0\n10                             Status.Code             0\n12                 Groups.With.Access.Code             0\n22                              EV.Network             0\n24                          Geocode.Status             0\n25                                Latitude             0\n26                               Longitude             0\n28                                      ID             0\n29                              Updated.At             0\n39                                 Country             0\n43        Groups.With.Access.Code..French.             0\n45                             Access.Code             0\n74                   EV.Workplace.Charging             0\n\n\n\n\nCode\nchargStat &lt;- chargStat |&gt;\n  mutate(\n    EV.Level1.EVSE.Num = ifelse(is.na(EV.Level1.EVSE.Num), 0, EV.Level1.EVSE.Num),\n    EV.Level2.EVSE.Num = ifelse(is.na(EV.Level2.EVSE.Num), 0, EV.Level2.EVSE.Num),\n    EV.DC.Fast.Count = ifelse(is.na(EV.DC.Fast.Count), 0, EV.DC.Fast.Count)\n  )\n\n\nchargStat_selected &lt;- chargStat[, c(\"Fuel.Type.Code\", \"Station.Name\", \"City\", \"State\", \"ZIP\", \"Groups.With.Access.Code\", \"Access.Days.Time\", \"Date.Last.Confirmed\", \"Open.Date\", \"Restricted.Access\",\"EV.Level1.EVSE.Num\", \"EV.Level2.EVSE.Num\", \"EV.DC.Fast.Count\")]\nchargStat_selected &lt;- na.omit(chargStat_selected)\n\nmissing_values &lt;- colSums(is.na(chargStat_selected))\nmissing_df &lt;- data.frame(Column = names(missing_values), MissingValues = missing_values)\nrownames(missing_df) &lt;- NULL\n\nggplot(missing_df, aes(x = reorder(Column, -MissingValues), y = MissingValues)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  coord_flip() +\n  labs(\n    title = \"Missing Values Per Column\",\n    x = \"Columns\",\n    y = \"Count of Missing Values\"\n  ) +\n  theme_minimal()\n\n\n\n\n\nCode\nwrite_csv(chargStat_selected, \"data/chargStat_selected.csv\")\n\n\nWe cleaned the data by: 1. Deleting the columns that are not important to our questions and choosing only the columns/features that we care about. For example: City, State, Restricted.Access. 2. In the new dataset with the selected columns, we deleted rows with NA values. After the process, we can see that there’s no missing value.\n\nElectric Vehicle Population Data in the State of Washington\n\n\n\nCode\nfile_path &lt;- \"data/washington_EV_Pop.csv\"\ndata &lt;- read.csv(file_path, stringsAsFactors = FALSE)\ndata[data == \"\"] &lt;- NA\nwash_EV_pop &lt;- data\n\n\n\n\nCode\nmissing_values &lt;- colSums(is.na(wash_EV_pop))\nmissing_df &lt;- data.frame(Column = names(missing_values), MissingValues = missing_values)\nrownames(missing_df) &lt;- NULL\n\nggplot(missing_df, aes(x = reorder(Column, -MissingValues), y = MissingValues)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  coord_flip() +\n  labs(\n    title = \"Missing Values Per Column\",\n    x = \"Columns\",\n    y = \"Count of Missing Values\"\n  ) +\n  theme_minimal()\n\n\n\n\n\nFields with many missing vlaues like Legislative district might depend on accurate geolocation, which may not always be available. The column Vehicle.Location has a moderate level of missing values, which might only be relevant for certain vehicle records or might face challenges in data reporting. The other columns have little or no missing values.\n\n\nCode\nwash_EV_pop_sel &lt;- wash_EV_pop[, !(names(wash_EV_pop) %in% c(\"Legislative.District\", \"Vehicle.Location\", \"Base.MSRP\", \"X2020.Census.Tract\", \"DOL.Vehicle.ID\"))]\nwash_EV_pop_sel &lt;- na.omit(wash_EV_pop_sel)\n\nmissing_values &lt;- colSums(is.na(wash_EV_pop_sel))\nmissing_df &lt;- data.frame(Column = names(missing_values), MissingValues = missing_values)\nrownames(missing_df) &lt;- NULL\n\nggplot(missing_df, aes(x = reorder(Column, -MissingValues), y = MissingValues)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  coord_flip() +\n  labs(\n    title = \"Missing Values Per Column\",\n    x = \"Columns\",\n    y = \"Count of Missing Values\"\n  ) +\n  theme_minimal()\n\n\n\n\n\nCode\nwrite_csv(wash_EV_pop_sel, \"data/wash_EV_pop_sel.csv\")\n\n\nWe cleaned the data similarly to what we did on dataset 3. We chose the columns that we care by deleting the columns that are not important to this project. Then we deleted the rows containing NA values. After the clearning, we can see that there are no missing values.\n4.Electric Vehicle Population Size History By County in the State of Washington\n\n\nCode\nfile_path &lt;- \"data/wash_EVPop_Hist_County.csv\"\ndata &lt;- read.csv(file_path, stringsAsFactors = FALSE)\ndata[data == \"\"] &lt;- NA\nwash_EVpop_hist &lt;- data\n\n\n\n\nCode\nmissing_values &lt;- colSums(is.na(wash_EVpop_hist))\nmissing_df &lt;- data.frame(Column = names(missing_values), MissingValues = missing_values)\nrownames(missing_df) &lt;- NULL\n\nggplot(missing_df, aes(x = reorder(Column, -MissingValues), y = MissingValues)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  coord_flip() +\n  labs(\n    title = \"Missing Values Per Column\",\n    x = \"Columns\",\n    y = \"Count of Missing Values\"\n  ) +\n  theme_minimal()\n\n\n\n\n\nBoth the State and County columns have a significant number of missing values. These two columns are important to our topic, so we didn’t delete them like what we did on the previous dataset.\nAll other columns appear to have no missing values.\n\n\nCode\nwash_EVpop_hist_sel &lt;- na.omit(wash_EVpop_hist)\n\nmissing_values &lt;- colSums(is.na(wash_EVpop_hist_sel))\nmissing_df &lt;- data.frame(Column = names(missing_values), MissingValues = missing_values)\nrownames(missing_df) &lt;- NULL\n\nggplot(missing_df, aes(x = reorder(Column, -MissingValues), y = MissingValues)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  coord_flip() +\n  labs(\n    title = \"Missing Values Per Column\",\n    x = \"Columns\",\n    y = \"Count of Missing Values\"\n  ) +\n  theme_minimal()\n\n\n\n\n\nCode\nwrite_csv(wash_EVpop_hist_sel, \"data/wash_EVpop_hist_sel.csv\")\n\n\nThough the number of missing values for columns State and County are relatively higher than the other columns, comparing to the total number of row, deleting the those missing values won’t cause a significant data loss. Therefore, we deleted them."
  },
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "3  Results",
    "section": "",
    "text": "Code\nlibrary(dplyr)\nlibrary(readr)\nlibrary(ggplot2)\nlibrary(tidyverse)\nlibrary(scales)\n\n\n\n\nCode\nfuel_prices_average &lt;- read.csv(\"data/fuel_prices_average.csv\",stringsAsFactors = FALSE)\nchargStat_selected &lt;- read.csv(\"data/chargStat_selected.csv\", stringsAsFactors = FALSE)\nwash_EV_pop_sel &lt;- read.csv(\"data/wash_EV_pop_sel.csv\", stringsAsFactors = FALSE)\nwash_EVpop_hist_sel &lt;- read.csv(\"data/wash_EVpop_hist_sel.csv\", stringsAsFactors = FALSE)\n\n\n(pic) Timeseries Fuel Price (Gasoline, E85, CNG, Propane., Diesel)\n\n\nCode\nfuel_prices_average &lt;- fuel_prices_average |&gt;\n  mutate(across(\n    c(Gasoline, E85, CNG, LNG, Propane., Diesel, B20, B99.B100),\n    ~ as.numeric(gsub(\"[^0-9.]\", \"\", .))  # Remove non-numeric characters like '$'\n  ))\n\n\nna_summary &lt;- sapply(fuel_prices_average[c(\"Gasoline\", \"E85\", \"CNG\", \"LNG\", \"Propane.\", \"Diesel\", \"B20\", \"B99.B100\")], function(x) sum(is.na(x)))\n\n# Convert Report.Date to Date format\nfuel_prices_average &lt;- fuel_prices_average %&gt;%\n  mutate(Report.Date = as.Date(Report.Date, format = \"%m/%d/%y\"))\n\n\n\n\nCode\nggplot(fuel_prices_average, aes(x = Report.Date)) +\n  geom_line(aes(y = Gasoline, color = \"Gasoline\"), linewidth = 0.5) +\n  geom_line(aes(y = E85, color = \"E85\"), linewidth = 0.5) +\n  geom_line(aes(y = CNG, color = \"CNG\"), linewidth = 0.5) +\n  geom_line(aes(y = Propane., color = \"Propane\"), linewidth = 0.5) +\n  geom_line(aes(y = Diesel, color = \"Diesel\"), linewidth = 0.5) +\n  labs(\n    title = \"Time Series of Gasolino, E85, CNG, Propane, and Diesel\",\n    x = \"Date\",\n    y = \"Price (USD)\",\n    color = \"Fuel Type\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.position = \"top\"\n  )\n\n\n\n\n\n(pic) Moving Average of Time Series of Fuel to hightlight change (k = 4 to caculate each 1 to 2 average since our indices of date is more likely break by half or one third of the year)\n\n\nCode\nfuel_prices_MA &lt;- fuel_prices_average |&gt;\n  mutate(\n    Gasoline_MA = zoo::rollmean(Gasoline, k = 4, fill = NA, align = \"right\"),\n    E85_MA = zoo::rollmean(E85, k = 4, fill = NA, align = \"right\"),\n    CNG_MA = zoo::rollmean(CNG, k = 4, fill = NA, align = \"right\"),\n    Propane_MA = zoo::rollmean(Propane., k = 4, fill = NA, align = \"right\"),\n    Diesel_MA = zoo::rollmean(Diesel, k = 4, fill = NA, align = \"right\")\n  )\n\n\nfuel_prices_MA_filtered &lt;- fuel_prices_MA |&gt;\n  filter(!is.na(Gasoline_MA) | !is.na(E85_MA) | !is.na(CNG_MA) | \n         !is.na(Propane_MA) | !is.na(Diesel_MA))\n\nggplot(fuel_prices_MA_filtered, aes(x = Report.Date)) +\n  geom_line(aes(y = Gasoline_MA, color = \"Gasoline\"), linewidth = 1,linetype = \"dashed\") +\n  geom_line(aes(y = E85_MA, color = \"E85\"), linewidth = 1,linetype = \"dashed\") +\n  geom_line(aes(y = CNG_MA, color = \"CNG\"), linewidth = 1,linetype = \"dashed\") +\n  geom_line(aes(y = Propane_MA, color = \"Propane\"), linewidth = 1,linetype = \"dashed\") +\n  geom_line(aes(y = Diesel_MA, color = \"Diesel\"), linewidth = 1,linetype = \"dashed\") +\n  labs(\n    title = \"2 years Moving Average of Fuel Prices (Filtered)\",\n    x = \"Date\",\n    y = \"Price (USD)\",\n    color = \"Fuel Type\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.position = \"top\"\n  )\n\n\n\n\n\n(pic) Electric Vehicle Chargers (in Fuel Station) distribution\n\n\nCode\nstate_distribution &lt;- chargStat_selected |&gt;\n  group_by(State) |&gt;\n  summarise(Count = n()) |&gt;\n  mutate(Percentage = Count / sum(Count) * 100) |&gt;\n  arrange(desc(Percentage))\n\n\nggplot(state_distribution, aes(x = reorder(State, -Percentage), y = Percentage, fill = Percentage)) +\n  geom_bar(stat = \"identity\", color = \"black\") +  \n  labs(title = \"Percentage of EV chargers in fuel Stations by State\",\n       x = \"State\",\n       y = \"Percentage (%)\") +\n  theme_minimal() +\n  scale_fill_gradient(low = \"lightblue\", high = \"darkblue\", name = \"Ranking\") + \n  theme(axis.text.x = element_text(angle = 45, hjust = 1)) +\n  geom_text(aes(label = paste0(round(Percentage, 1), \"%\")),\n            position = position_stack(vjust = 0.5), size =1.5, color = \"white\")  \n\n\n\n\n\n(pic) Different Charger Type in Each state counts\n\n\nCode\ncharger_type_distribution &lt;- chargStat_selected |&gt;\n  group_by(State) |&gt;\n  summarise(\n    Level1_Chargers = sum(EV.Level1.EVSE.Num, na.rm = TRUE),\n    Level2_Chargers = sum(EV.Level2.EVSE.Num, na.rm = TRUE),\n    DC_Fast_Chargers = sum(EV.DC.Fast.Count, na.rm = TRUE)\n  ) |&gt;\n  pivot_longer(\n    cols = c(Level1_Chargers, Level2_Chargers, DC_Fast_Chargers),\n    names_to = \"Charger.Type\",\n    values_to = \"Total_Count\"\n  ) |&gt;\n  arrange(desc(Total_Count))\n\n\ncharger_level1 &lt;- charger_type_distribution |&gt;\n  filter(Charger.Type == \"Level1_Chargers\") |&gt;\n  arrange(desc(Total_Count))\n\ncharger_level2 &lt;- charger_type_distribution |&gt;\n  filter(Charger.Type == \"Level2_Chargers\") |&gt;\n  arrange(desc(Total_Count))\n\ncharger_dc_fast &lt;- charger_type_distribution |&gt;\n  filter(Charger.Type == \"DC_Fast_Chargers\") |&gt;\n  arrange(desc(Total_Count))\n\n\nggplot(charger_level1, aes(x = reorder(State, -Total_Count), y = Total_Count, fill = Total_Count)) +\n  geom_bar(stat = \"identity\", color = \"white\") +\n  labs(\n    title = \"EV Level1 EVSE Num by State\",\n    x = \"State\",\n    y = \"Total Count\"\n  ) +\n  scale_fill_viridis_c(option = \"D\", direction = -1) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\nCode\nggplot(charger_level2, aes(x = reorder(State, -Total_Count), y = Total_Count, fill = Total_Count)) +\n  geom_bar(stat = \"identity\", color = \"white\") +\n  labs(\n    title = \"EV Level2 EVSE Num by State\",\n    x = \"State\",\n    y = \"Total Count\"\n  ) +\n  scale_fill_viridis_c(option = \"D\", direction = -1) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\nCode\nggplot(charger_dc_fast, aes(x = reorder(State, -Total_Count), y = Total_Count, fill = Total_Count)) +\n  geom_bar(stat = \"identity\", color = \"white\") +\n  labs(\n    title = \"EV DC Fast Chargers by State\",\n    x = \"State\",\n    y = \"Total Count\"\n  ) +\n  scale_fill_viridis_c(option = \"D\", direction = -1) +\n  theme_minimal() +\n  theme(axis.text.x = element_text(angle = 90, hjust = 1))\n\n\n\n\n\n(pic) Facet with most popular chargers type: Level 2 Chargers and DC Fast Chargers\n\n\nCode\nlevel2_and_fast_distribution &lt;- chargStat_selected |&gt;\n  select(State, EV.Level2.EVSE.Num, EV.DC.Fast.Count) |&gt;\n  pivot_longer(\n    cols = c(EV.Level2.EVSE.Num, EV.DC.Fast.Count),\n    names_to = \"Charger.Type\",\n    values_to = \"Count\"\n  ) |&gt;\n  group_by(State, Charger.Type) |&gt;\n  summarise(Total_Count = sum(Count), .groups = \"drop\") |&gt;\n  arrange(Charger.Type, desc(Total_Count))\n\n# Create faceted bar plot\nggplot(level2_and_fast_distribution, aes(x = reorder(State, Total_Count), y = Total_Count, fill = Total_Count)) +\n  geom_bar(stat = \"identity\", color = \"white\") +\n  facet_wrap(~ Charger.Type, scales = \"free_y\") +\n  coord_flip() +\n  labs(\n    title = \"Level 2 and DC Fast Charger Distribution by State\",\n    x = \"State\",\n    y = \"Total Count\",\n    fill = \"Charger Count\"\n  ) +\n  scale_fill_viridis_c(option = \"D\", direction = -1)+\n  theme_minimal() +\n  theme(\n    axis.text.y = element_text(size = 8),\n    strip.text = element_text(size = 10, face = \"bold\")\n  )\n\n\n\n\n\n(pic) Access time of the charger station in Total (24 hrs vs Not 24 hrs)\n\n\nCode\naccess_time_grouped &lt;- chargStat_selected |&gt;\n  mutate(\n    Access_Group = ifelse(grepl(\"^24 hours daily\", Access.Days.Time), \"24 Hours\", \"non 24 hours\")\n  )\n\n\noverall_distribution &lt;- access_time_grouped |&gt;\n  group_by(Access_Group) |&gt;\n  summarise(Count = n(), .groups = \"drop\") |&gt;\n  mutate(Percentage = (Count / sum(Count)) * 100)\n\n\nggplot(overall_distribution, aes(x = \"\", y = Percentage, fill = Access_Group)) +\n  geom_bar(stat = \"identity\", width = 1, color = \"white\") +\n  coord_polar(theta = \"y\") +\n  geom_text(aes(label = paste0(round(Percentage, 1), \"%\")), \n            position = position_stack(vjust = 0.5), size = 5, color = \"white\") +\n  labs(\n    title = \"Distribution of EV Chargers Access Time (U.S)\",\n    fill = \"Access Group\"\n  ) +\n  theme_void() +\n  scale_fill_manual(values = c(\"24 Hours\" = \"dodgerblue\", \"non 24 hours\" = \"tomato\"))\n\n\n\n\n\n(pic) 24hrs chargers distribution within each state\n\n\nCode\n# Calculate the state-level distribution\nstate_access_distribution &lt;- access_time_grouped |&gt; \n  group_by(State, Access_Group) |&gt; \n  summarise(Count = n(), .groups = \"drop\") |&gt; \n  group_by(State) |&gt; \n  mutate(Percentage = (Count / sum(Count)) * 100)\n\n\n# Order states by the count of \"24 Hours\" access group\nstate_order &lt;- state_access_distribution |&gt;\n  filter(Access_Group == \"24 Hours\") |&gt;\n  arrange(desc(Percentage)) |&gt;\n  pull(State)\n\n# Create the bar graph with reordered states\nggplot(state_access_distribution, aes(x = factor(State, levels = state_order), y = Percentage, fill = Access_Group)) +\n  geom_bar(stat = \"identity\", position = \"stack\", color = \"white\") +\n  labs(\n    title = \"State-Level Distribution of Access Times in EV Charger Stations (24 Hours Ranked)\",\n    x = \"State\",\n    y = \"Percentage (%)\",\n    fill = \"Access Group\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.position = \"top\"\n  ) +\n  scale_fill_manual(values = c(\"24 Hours\" = \"dodgerblue\", \"non 24 hours\" = \"tomato\"))\n\n\n\n\n\n(pic) True or False of the Restrict Access of Charge Station\n\n\nCode\n# Calculate the percentage of true and false for Restricted.Access in each state\naccess_distribution &lt;- chargStat_selected |&gt;\n  group_by(State, Restricted.Access) |&gt;\n  summarise(Count = n(), .groups = \"drop\") |&gt;\n  group_by(State) |&gt;\n  mutate(Percentage = (Count / sum(Count)) * 100)\n\n# Filter the `true` percentages to determine the ordering\nstate_order &lt;- access_distribution |&gt;\n  filter(Restricted.Access == \"true\") |&gt;\n  arrange(desc(Percentage)) |&gt;\n  pull(State)\n\n# Create a bar graph to display the distribution\nggplot(access_distribution, aes(x = factor(State, levels = state_order), y = Percentage, fill = Restricted.Access)) +\n  geom_bar(stat = \"identity\", position = \"stack\", color = \"white\") +\n  labs(\n    title = \"Distribution of True and False Restricted Access by State\",\n    x = \"State\",\n    y = \"Percentage (%)\",\n    fill = \"Restricted Access of Charge Station\"\n  ) +\n  theme_minimal() +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1),\n    legend.position = \"top\"\n  ) +\n  scale_fill_manual(values = c(\"true\" = \"dodgerblue\", \"false\" = \"tomato\"))\n\n\n\n\n\n\n\nCode\nwash_city_EVs &lt;- wash_EV_pop_sel |&gt;\n  group_by(City) |&gt;\n  summarise(CarCount = n()) |&gt;\n  arrange(desc(CarCount)) \n\n\n\n\nCode\nwash_city_EVs2 &lt;- wash_city_EVs |&gt;\n  mutate(City = ifelse(CarCount &lt; 500, \"Other\", as.character(City))) |&gt;\n  group_by(City) |&gt;\n  summarise(CarCount = sum(CarCount)) |&gt;\n  mutate(Proportion = CarCount / sum(CarCount)) |&gt;\n  arrange(desc(Proportion))\n\nggplot(wash_city_EVs2, aes(y = reorder(City, -Proportion), x = Proportion, fill = Proportion)) +\n  geom_bar(stat = \"identity\") +\n  theme_minimal() +\n  labs(\n    title = \"Proportion of Electric Vehicles in Each City\",\n    x = \"Proportion\",\n    y = \"City\"\n  ) +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 15),\n    axis.text.y = element_text(size = 15),\n    plot.title = element_text(size = 20, face = \"bold\"),\n    axis.title = element_text(size = 18)\n  ) +\n  scale_x_continuous(labels = percent) +  # Show x-axis as percentages\n  scale_fill_gradient(low = \"lightblue\", high = \"darkblue\")  # Gradient color scheme\n\n\n\n\n\nWe want to know why there’s a big gap between the number of EVs in each city in WA.\n\n\nCode\nwash_chargStat &lt;- chargStat_selected |&gt;\n  filter(State == \"WA\", Restricted.Access == \"false\")\n\nwash_charg_counts &lt;- wash_chargStat |&gt;\n  group_by(City) |&gt;\n  summarise(StationCount = n()) |&gt;\n  arrange(desc(StationCount)) \n\nmerged_data &lt;- merge(wash_city_EVs, wash_charg_counts, by = \"City\", suffixes = c(\"car_\", \"station_\"))\n\nev_threshold &lt;- 10000\nstation_threshold &lt;- 10\n\nggplot(merged_data, aes(y = CarCount, x = StationCount)) +\n  geom_point(color = \"steelblue\", size = 3, alpha = 0.6) +\n  geom_text(\n    aes(label = ifelse(CarCount &gt; ev_threshold | StationCount &gt; station_threshold, City, \"\")), \n    hjust = 0.5, vjust = -0.5, size = 3, color = \"darkred\"\n  ) +\n  theme_minimal() +\n  labs(\n    title = \"Scatterplot of Station Counts and EV Counts in Cities in WA\",\n    y = \"Counts of EVs in Each City\",\n    x = \"Counts of Stations in Each City\"\n  ) +\n  theme(\n    plot.title = element_text(size = 14, face = \"bold\"),\n    axis.title = element_text(size = 12),\n    axis.text = element_text(size = 10)\n  )\n\n\n\n\n\n\n\nCode\nev_type_counts &lt;- wash_EV_pop_sel |&gt;\n  count(Electric.Vehicle.Type) |&gt;\n  mutate(percentage = n / sum(n) * 100)\n\nggplot(ev_type_counts, aes(x = \"\", y = percentage, fill = Electric.Vehicle.Type)) +\n  geom_bar(stat = \"identity\", width = 1) +\n  coord_polar(\"y\", start = 0) +\n  theme_void() +\n  labs(\n    title = \"Distribution of EV Types\",\n    fill = \"EV Type\"\n  ) +\n  geom_text(aes(label = paste0(round(percentage, 1), \"%\")), \n            position = position_stack(vjust = 0.5))\n\n\n\n\n\n\n\nCode\nbev_proportions &lt;- wash_EV_pop_sel |&gt; \n  group_by(City) |&gt;\n  summarise(\n    Total_EV_Count = n(),\n    BEV_Count = sum(Electric.Vehicle.Type == \"Battery Electric Vehicle (BEV)\"),\n    BEV_Proportion = BEV_Count / Total_EV_Count,\n    .groups = \"drop\"\n  )\n\nscatter_data &lt;- merged_data |&gt;\n  select(City, StationCount) |&gt;\n  inner_join(bev_proportions, by = \"City\")\n\nggplot(scatter_data, aes(x = StationCount, y = BEV_Proportion)) +\n  geom_point(color = \"steelblue\", size = 3, alpha = 0.7) +\n  theme_minimal() +\n  labs(\n    title = \"Scatterplot of BEV Proportion vs Stations in Cities\",\n    x = \"Number of Stations in Each City\",\n    y = \"Proportion of BEVs in Each City\"\n  ) +\n  scale_y_continuous(labels = scales::percent) +  \n  theme(\n    plot.title = element_text(size = 14, face = \"bold\"),\n    axis.title = element_text(size = 12),\n    axis.text = element_text(size = 10)\n  )\n\n\n\n\n\n\n\nCode\nmake_counts &lt;- wash_EV_pop_sel|&gt;\n  count(Make) |&gt;\n  arrange(desc(n)) |&gt;\n  mutate(Make = factor(Make, levels = Make)) \n\nthreshold &lt;- 500\nmake_counts &lt;- make_counts |&gt;\n  mutate(Make = ifelse(n &lt; threshold, \"OTHER\", as.character(Make))) |&gt;\n  group_by(Make) |&gt;\n  summarise(n = sum(n)) |&gt;\n  arrange(desc(n)) |&gt;\n  mutate(Make = factor(Make, levels = Make))\n\nggplot(make_counts, aes(x = Make, y = n, fill = n)) +\n  geom_bar(stat = \"identity\") +\n  scale_fill_gradient(low = \"lightgreen\", high = \"darkgreen\") +\n  theme_minimal() +\n  labs(\n    title = \"Distribution of Vehicle Makes\",\n    x = \"Vehicle Make\",\n    y = \"Count\",\n    fill = \"Count\"\n  ) +\n  theme(\n    axis.text.x = element_text(angle = 45, hjust = 1, size = 10),\n    axis.title = element_text(size = 12),\n    plot.title = element_text(size = 14, face = \"bold\")\n  )"
  }
]